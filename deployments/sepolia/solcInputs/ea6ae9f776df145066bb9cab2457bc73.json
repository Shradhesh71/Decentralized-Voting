{
  "language": "Solidity",
  "sources": {
    "contracts/Voting.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.24;\r\n\r\n// Error\r\nerror AlreadyVoted(string name);\r\nerror NotVerified(string name);\r\nerror VotingNotStart();\r\nerror VotingClosed();\r\nerror NotOwner();\r\n\r\ncontract Voting {\r\n    // Variable\r\n    address private immutable i_admin;\r\n    uint256 public s_candidateCount;\r\n    uint256 public s_voterCount;\r\n    bool start;\r\n    bool end;\r\n\r\n    // modifier\r\n    modifier onlyAdmin() {\r\n        // Modifier for only admin access\r\n        if (msg.sender == i_admin) {\r\n            revert NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    // Constructor\r\n    constructor() {\r\n        // Initilizing default values\r\n        i_admin = msg.sender;\r\n        s_candidateCount = 0;\r\n        s_voterCount = 0;\r\n        start = false;\r\n        end = false;\r\n    }\r\n\r\n    // Modeling a candidate\r\n    struct Candidate {\r\n        uint256 candidateId;\r\n        string name;\r\n        string slogan;\r\n        string partyName;\r\n        string aadhar;\r\n        uint256 voteCount;\r\n    }\r\n\r\n    //mapping\r\n    mapping(uint256 => Candidate) public candidateDetails;\r\n\r\n    // Adding new candidates\r\n    function addCandidate(\r\n        string memory _name,\r\n        string memory _slogan,\r\n        string memory _partyName,\r\n        string memory _aadhar\r\n    )\r\n        public\r\n        // Only admin can add\r\n        onlyAdmin\r\n    {\r\n        Candidate memory newCandidate = Candidate({\r\n            candidateId: s_candidateCount,\r\n            name: _name,\r\n            slogan: _slogan,\r\n            partyName: _partyName,\r\n            aadhar: _aadhar,\r\n            voteCount: 0\r\n        });\r\n        candidateDetails[s_candidateCount] = newCandidate;\r\n        s_candidateCount += 1;\r\n    }\r\n\r\n    // Get candidates count\r\n    function getTotalCandidate() public view returns (uint256) {\r\n        // Returns total number of candidates\r\n        return s_candidateCount;\r\n    }\r\n\r\n    // Get voters count\r\n    function getTotalVoter() public view returns (uint256) {\r\n        // Returns total number of voters\r\n        return s_voterCount;\r\n    }\r\n\r\n    // Modeling a voter\r\n    struct Voter {\r\n        address voterAddress;\r\n        string name;\r\n        string phone;\r\n        string aadhar;\r\n        string email;\r\n        bool isVerified;\r\n        bool hasVoted;\r\n        bool isRegistered;\r\n    }\r\n    address[] public voters; // Array of address to store address of voters\r\n    mapping(address => Voter) public voterDetails; // isko private krna hai\r\n\r\n    // Request to be added as voter\r\n    function registerAsVoter(\r\n        string memory _name,\r\n        string memory _phone,\r\n        string memory _aadhar,\r\n        string memory _email\r\n    ) public {\r\n        Voter memory newVoter = Voter({\r\n            voterAddress: msg.sender,\r\n            name: _name,\r\n            phone: _phone,\r\n            aadhar: _aadhar,\r\n            email: _email,\r\n            isVerified: false,\r\n            hasVoted: false,\r\n            isRegistered: true\r\n        });\r\n        voterDetails[msg.sender] = newVoter;\r\n        voters.push(msg.sender);\r\n        s_voterCount += 1;\r\n    }\r\n\r\n    // Verify voter\r\n    function verifyVoter(\r\n        bool _verifedStatus,\r\n        address voterAddress\r\n    )\r\n        public\r\n        // Only admin can verify\r\n        onlyAdmin\r\n    {\r\n        voterDetails[voterAddress].isVerified = _verifedStatus;\r\n    }\r\n\r\n    // vote\r\n    function vote(uint256 candidateId) public {\r\n        if (voterDetails[msg.sender].hasVoted == true) {\r\n            revert AlreadyVoted(voterDetails[msg.sender].name);\r\n        }\r\n        if (voterDetails[msg.sender].isVerified == false) {\r\n            revert NotVerified(voterDetails[msg.sender].name);\r\n        }\r\n        if (start = false) {\r\n            revert VotingNotStart();\r\n        }\r\n        if (end = true) {\r\n            revert VotingClosed();\r\n        }\r\n        candidateDetails[candidateId].voteCount += 1;\r\n        voterDetails[msg.sender].hasVoted = true;\r\n    }\r\n\r\n    // End election\r\n    function endElection() public onlyAdmin {\r\n        end = true;\r\n        start = false;\r\n    }\r\n\r\n    // Get election start and end values\r\n    function getStart() public view returns (bool) {\r\n        return start;\r\n    }\r\n\r\n    function getEnd() public view returns (bool) {\r\n        return end;\r\n    }\r\n\r\n    // Modeling a Election Details\r\n    struct ElectionDetails {\r\n        string adminName;\r\n        string adminEmail;\r\n        string adminTitle;\r\n        string electionTitle;\r\n        string organizationTitle;\r\n    }\r\n    ElectionDetails public electionDetails; // public only for test cases\r\n\r\n    // Set Elections details\r\n    function setElectionDetails(\r\n        string memory _adminName,\r\n        string memory _adminEmail,\r\n        string memory _adminTitle,\r\n        string memory _electionTitle,\r\n        string memory _organizationTitle\r\n    ) public onlyAdmin {\r\n        electionDetails = ElectionDetails({\r\n            adminName: _adminName,\r\n            adminEmail: _adminEmail,\r\n            adminTitle: _adminTitle,\r\n            electionTitle: _electionTitle,\r\n            organizationTitle: _organizationTitle\r\n        });\r\n        start = true;\r\n        end = false;\r\n    }\r\n\r\n    //  get Election details\r\n    function getElectionDetails()\r\n        public\r\n        view\r\n        returns (\r\n            string memory _adminName,\r\n            string memory _adminEmail,\r\n            string memory _adminTitle,\r\n            string memory _electionTitle,\r\n            string memory _organizationTitle\r\n        )\r\n    {\r\n        return (\r\n            electionDetails.adminName,\r\n            electionDetails.adminEmail,\r\n            electionDetails.adminTitle,\r\n            electionDetails.electionTitle,\r\n            electionDetails.organizationTitle\r\n        );\r\n    }\r\n\r\n    function getAdmin() public view returns (address) {\r\n        return i_admin;\r\n    }\r\n\r\n    // latter part\r\n    // function setDates(uint256 _startDate, uint256 _endDate) public{\r\n    //     require((votingEnd == 0) && (votingStart == 0) && (_startDate + 1000000 > now) && (_endDate > _startDate));\r\n    //     votingEnd = _endDate;\r\n    //     votingStart = _startDate;\r\n    // }\r\n\r\n    // function getDates() public view returns (uint256,uint256) {\r\n    //   return (votingStart,votingEnd);\r\n    // }\r\n}\r\n"
    }
  },
  "settings": {
    "evmVersion": "paris",
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}